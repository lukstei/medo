buildscript {
    ext {
        springBootVersion = '1.2.0.M2'
    }
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework:springloaded:1.2.1.RELEASE")

        classpath 'org.jooq:jooq-codegen:3.4.2'
        classpath 'org.postgresql:postgresql:9.3-1102-jdbc41'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    archiveName = "medo.jar"
}

springBoot {
    mainClass = "lst.medo.Server"
}

bootRepackage {
    mainClass = "lst.medo.Server"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }

}

dependencies {
    compile('org.postgresql:postgresql:9.3-1102-jdbc41')
    compile('org.apache.tomcat:tomcat-jdbc:8.0.14')

    compile 'org.jooq:jooq:3.4.2'
    compile 'org.jooq:jooq-meta:3.4.2'

    compile 'com.google.code.findbugs:jsr305:3.0.0'

    compile 'org.apache.tika:tika-java7:1.6'

    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework:spring-jdbc")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity3")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

task server(dependsOn: "stage", type: JavaExec ) {
    main = 'lst.medo.Server'
    classpath = sourceSets.main.runtimeClasspath
    args System.getProperty("exec.args")?.split() ?: ""
}

task stage(dependsOn: "build")

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

task('generateJooq') << {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.4.0.xsd') {
        jdbc() {
            driver('org.postgresql.Driver')
            url('jdbc:postgresql://localhost:5432/medo')
            user('postgres')
            password('')
        }
        generator() {
            name("org.jooq.util.DefaultGenerator")
            database() {
                inputSchema("public")
                name("org.jooq.util.postgres.PostgresDatabase")
            }
            generate() {
            }
            target() {
                packageName('lst.medo.generated')
                directory('src/main/java')
            }
        }
    }

    org.jooq.util.GenerationTool.main(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
}
